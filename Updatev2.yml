---
- name: Update Linux servers (platform-specific)
  hosts: linux
  gather_facts: yes
  become: yes
  vars_files:
    - vault.yml
  tasks:
    - name: Update package cache and upgrade packages on Debian/Ubuntu
      apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes
        autoclean: yes
      register: ubuntu_updates
      when: ansible_facts['os_family'] == "Debian"

    - name: Update package cache and upgrade packages on Fedora/RHEL
      dnf:
        name: "*"
        state: latest
        update_cache: yes
        autoremove: yes
      register: fedora_updates
      when: ansible_facts['os_family'] == "RedHat"

    - name: Reboot if kernel upgraded (Linux)
      reboot:
        reboot_timeout: 200
        test_command: whoami

    - name: Collect Linux updates for logging (actual packages)
      set_fact:
        updates_log_entry: >-
          {{
            updates_log_entry | default({}) | combine({
              inventory_hostname: {
                'os': ansible_facts['os_family'],
                'updates': (ubuntu_updates.upgraded | default([])) + (fedora_updates.changes | default([]))
              }
            })
          }}
      delegate_to: localhost
      run_once: true

- name: Update Windows servers
  hosts: windows
  gather_facts: yes
  tasks:
    - name: Check for updates
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
        state: searched
      register: windows_pending

    - name: Install updates
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
        state: installed
        reboot: yes
      register: windows_updates

    - name: Collect Windows updates for logging
      set_fact:
        updates_log_entry: "{{ updates_log_entry | default({}) | combine({inventory_hostname: {'os': 'Windows', 'updates': windows_updates.updates | default([])}}) }}"
      delegate_to: localhost
      run_once: true

- name: Write updates log to JSON file on controller with timestamp
  hosts: localhost
  gather_facts: no
  vars:
    timestamp: "{{ lookup('pipe', 'date +%Y-%m-%d_%H-%M-%S') }}"
    log_file: "/tmp/all_updates_log_{{ timestamp }}.json"
  tasks:
    - name: Save all updates to timestamped JSON
      copy:
        dest: "{{ log_file }}"
        content: "{{ updates_log_entry | to_nice_json }}"
