---
# Semaphore-kompatibles Multi-OS Update-Playbook

- name: Set ansible_become_pass from Vault
  hosts: localhost
  gather_facts: no
  vars_files:
    - vault.yml
  tasks:
    - name: Set ansible_become_pass safely
      set_fact:
        ansible_become_pass: "{{ vault_become_password | default('') }}"

- name: Update Linux and Windows servers
  hosts: all
  gather_facts: yes
  become: yes
  tasks:

    # --- Linux Updates ---
    - name: Update package cache (Ubuntu/Debian)
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_facts['os_family'] == 'Debian'

    - name: Upgrade all packages (Ubuntu/Debian)
      apt:
        upgrade: dist
        autoremove: yes
      when: ansible_facts['os_family'] == 'Debian'

    - name: Update package cache (Fedora/RHEL)
      dnf:
        update_cache: yes
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Upgrade all packages (Fedora/RHEL)
      dnf:
        name: '*'
        state: latest
        autoremove: yes
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Reboot Linux if kernel upgraded
      reboot:
        reboot_timeout: 300
        test_command: whoami
      when: ansible_facts['os_family'] in ['Debian','RedHat']

    - name: Collect Linux updates for logging
      set_fact:
        linux_updates: "{{ ansible_facts.packages | default({}) }}"
      when: ansible_facts['os_family'] in ['Debian','RedHat']

    # --- Windows Updates ---
    - name: Check for pending Windows updates
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
        state: searched
      register: windows_pending
      when: ansible_facts['os_family'] == 'Windows'

    - name: Install pending Windows updates
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
        state: installed
        reboot: yes
      register: windows_updates
      when: ansible_facts['os_family'] == 'Windows'

- name: Save all updates to timestamped JSON on controller
  hosts: localhost
  gather_facts: no
  vars:
    timestamp: "{{ lookup('pipe','date +%Y%m%d_%H%M%S') }}"
    log_dir: "./update_logs"
  tasks:
    - name: Ensure log directory exists
      file:
        path: "{{ log_dir }}"
        state: directory

    - name: Collect updates from all hosts
      set_fact:
        updates_log_entry:
          linux: "{{ hostvars | dict2items | selectattr('value.linux_updates','defined') | map(attribute='value.linux_updates') | list }}"
          windows: "{{ hostvars | dict2items | selectattr('value.windows_updates','defined') | map(attribute='value.windows_updates') | list }}"

    - name: Write updates to JSON file
      copy:
        content: "{{ updates_log_entry | to_nice_json }}"
        dest: "{{ log_dir }}/updates_{{ timestamp }}.json"
