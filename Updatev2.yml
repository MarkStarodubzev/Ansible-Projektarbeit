---
- name: Update all servers
  hosts: all
  gather_facts: yes
  # Remove global become - handle per platform
  vars:
    log_dir: "/tmp/update_logs"
  tasks:
    - name: Ensure log directory exists on controller
      file:
        path: "{{ log_dir }}"
        state: directory
      delegate_to: localhost
      run_once: true

# --- Linux Updates ---
- name: Update Linux servers
  hosts: linux
  gather_facts: yes
  become: yes
  tasks:
    - name: Update package cache (Ubuntu/Debian)
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_facts['os_family'] == "Debian"

    - name: Upgrade all packages (Ubuntu/Debian)
      ansible.builtin.apt:
        upgrade: dist
        autoremove: yes
        autoclean: yes
      when: ansible_facts['os_family'] == "Debian"
      register: debian_upgrade

    - name: Update package cache (Fedora/RHEL/CentOS)
      ansible.builtin.dnf:
        update_cache: yes
      when: ansible_facts['os_family'] == "RedHat"

    - name: Upgrade all packages (Fedora/RHEL/CentOS)
      ansible.builtin.dnf:
        name: "*"
        state: latest
      when: ansible_facts['os_family'] == "RedHat"
      register: redhat_upgrade

    - name: Check if reboot required (Ubuntu/Debian)
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file
      when: ansible_facts['os_family'] == "Debian"

    - name: Reboot if required (Ubuntu/Debian)
      ansible.builtin.reboot:
        reboot_timeout: 600
        test_command: whoami
      when: 
        - ansible_facts['os_family'] == "Debian"
        - reboot_required_file.stat.exists

    - name: Reboot if kernel updated (RHEL/CentOS/Fedora)
      ansible.builtin.reboot:
        reboot_timeout: 600
        test_command: whoami
      when:
        - ansible_facts['os_family'] == "RedHat"
        - redhat_upgrade is defined
        - redhat_upgrade.changed

    - name: Collect Linux update information
      ansible.builtin.shell: |
        if [ "{{ ansible_facts['os_family'] }}" == "Debian" ]; then
          echo "=== Recently upgraded packages ===" 
          grep " upgrade " /var/log/apt/history.log | tail -20 || echo "No recent upgrades found"
          echo "=== Current upgradable packages ==="
          apt list --upgradable 2>/dev/null || echo "No upgradable packages"
        else
          echo "=== Recently updated packages ==="
          dnf history list --reverse | head -10 || echo "No recent updates found"
          echo "=== Available updates ==="
          dnf check-update 2>/dev/null || echo "All packages up to date"
        fi
      register: linux_updates
      changed_when: false
      failed_when: false

    - name: Save Linux updates log
      copy:
        content: |
          Linux Update Log for {{ inventory_hostname }}
          Generated: {{ ansible_date_time.iso8601 }}
          OS Family: {{ ansible_facts['os_family'] }}
          OS Version: {{ ansible_facts['distribution'] }} {{ ansible_facts['distribution_version'] }}
          
          {{ linux_updates.stdout }}
        dest: "{{ log_dir }}/linux_updates_{{ inventory_hostname }}_{{ ansible_date_time.iso8601 }}.log"
      delegate_to: localhost

# --- Windows Updates ---
- name: Update Windows servers
  hosts: windows
  gather_facts: yes
  # No become needed for Windows
  tasks:
    - name: Check for Windows updates using PowerShell
      win_shell: |
        $UpdateSession = New-Object -ComObject Microsoft.Update.Session
        $UpdateSearcher = $UpdateSession.CreateUpdateSearcher()
        $SearchResult = $UpdateSearcher.Search("IsInstalled=0 and Type='Software' and IsHidden=0")
        Write-Host "Found $($SearchResult.Updates.Count) updates"
        foreach ($Update in $SearchResult.Updates) {
            Write-Host "- $($Update.Title)"
        }
        $SearchResult.Updates.Count
      register: windows_pending
      changed_when: false

    - name: Display pending updates
      debug:
        msg: "Found {{ windows_pending.stdout_lines[-1] | default(0) }} pending updates"

    - name: Install Windows updates using PowerShell
      win_shell: |
        $UpdateSession = New-Object -ComObject Microsoft.Update.Session
        $UpdateSearcher = $UpdateSession.CreateUpdateSearcher()
        $SearchResult = $UpdateSearcher.Search("IsInstalled=0 and Type='Software' and IsHidden=0")
        
        if ($SearchResult.Updates.Count -eq 0) {
            Write-Host "No updates available"
            exit 0
        }
        
        $UpdateCollection = New-Object -ComObject Microsoft.Update.UpdateColl
        foreach ($Update in $SearchResult.Updates) {
            if ($Update.Title -match "Security|Critical") {
                $UpdateCollection.Add($Update) | Out-Null
                Write-Host "Adding: $($Update.Title)"
            }
        }
        
        if ($UpdateCollection.Count -eq 0) {
            Write-Host "No critical or security updates found"
            exit 0
        }
        
        $Downloader = $UpdateSession.CreateUpdateDownloader()
        $Downloader.Updates = $UpdateCollection
        $DownloadResult = $Downloader.Download()
        
        $Installer = $UpdateSession.CreateUpdateInstaller()
        $Installer.Updates = $UpdateCollection
        $InstallResult = $Installer.Install()
        
        Write-Host "Installation completed with result code: $($InstallResult.ResultCode)"
        Write-Host "Reboot required: $($InstallResult.RebootRequired)"
        
        # Return JSON-like output for parsing
        @{
            ResultCode = $InstallResult.ResultCode
            RebootRequired = $InstallResult.RebootRequired
            UpdatesInstalled = $UpdateCollection.Count
        } | ConvertTo-Json
      register: windows_updates
      when: windows_pending.stdout_lines[-1] | int > 0
      changed_when: windows_updates.stdout is defined and 'ResultCode' in windows_updates.stdout

    - name: Reboot Windows if required
      win_reboot:
        reboot_timeout: 1200
        test_command: whoami
      when: 
        - windows_updates is defined
        - windows_updates.stdout is defined
        - '"RebootRequired": true' in windows_updates.stdout

    - name: Save Windows updates log
      copy:
        content: |
          Windows Update Log for {{ inventory_hostname }}
          Generated: {{ ansible_date_time.iso8601 }}
          OS Version: {{ ansible_facts['distribution'] | default('Windows') }} {{ ansible_facts['distribution_version'] | default('Unknown') }}
          
          Updates Found: {{ windows_pending.stdout_lines[-1] | default(0) }}
          
          {% if windows_pending.stdout_lines is defined and windows_pending.stdout_lines | length > 1 %}
          Available Updates:
          {% for line in windows_pending.stdout_lines[:-1] %}
          {{ line }}
          {% endfor %}
          {% endif %}
          
          {% if windows_updates.stdout is defined %}
          Installation Results:
          {{ windows_updates.stdout }}
          {% endif %}
        dest: "{{ log_dir }}/windows_updates_{{ inventory_hostname }}_{{ ansible_date_time.iso8601 }}.log"
      delegate_to: localhost
