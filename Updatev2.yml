---
- name: Set become password for current host
  hosts: all
  gather_facts: yes
  vars_files:
    - vault.yml
  tasks:
    - name: Set become password from vault
      set_fact:
        ansible_become_password: "{{ ansible_become_passwords[inventory_hostname] }}"
      when: ansible_facts['os_family'] in ['Debian','RedHat']

- name: Update Linux servers
  hosts: linux
  gather_facts: yes
  become: yes
  tasks:

    - name: Update package cache (Ubuntu/Debian)
      ansible.builtin.apt:
        update_cache: yes
      when: ansible_facts['os_family'] == "Debian"

    - name: Upgrade all packages (Ubuntu/Debian)
      ansible.builtin.apt:
        upgrade: dist
        autoremove: yes
      when: ansible_facts['os_family'] == "Debian"

    - name: Update package cache (Fedora/RHEL)
      ansible.builtin.dnf:
        update_cache: yes
      when: ansible_facts['os_family'] == "RedHat"

    - name: Upgrade all packages (Fedora/RHEL)
      ansible.builtin.dnf:
        name: "*"
        state: latest
        autoremove: yes
      when: ansible_facts['os_family'] == "RedHat"

    - name: Reboot if kernel upgraded
      ansible.builtin.reboot:
        reboot_timeout: 200
        test_command: whoami

    - name: Collect Linux updates for logging
      set_fact:
        linux_updates_log: "{{ ansible_facts.packages | default({}) }}"

- name: Update Windows servers
  hosts: windows
  gather_facts: yes
  tasks:

    - name: Check for updates
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
        state: searched
      register: windows_pending

    - name: Install updates
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
        state: installed
        reboot: yes
      register: windows_updates

    - name: Collect Windows updates for logging
      set_fact:
        windows_updates_log: "{{ windows_updates.updates }}"

- name: Save all updates to timestamped JSON on controller
  hosts: localhost
  gather_facts: no
  vars:
    log_dir: "/tmp/ansible_updates"
    log_file: "{{ log_dir }}/updates_{{ lookup('pipe','date +%Y%m%d_%H%M%S') }}.json"
  tasks:
    - name: Ensure log directory exists
      file:
        path: "{{ log_dir }}"
        state: directory

    - name: Combine all update logs
      set_fact:
        updates_log_entry:
          linux: "{{ hostvars | dict2items | selectattr('value.linux_updates_log','defined') | items2dict }}"
          windows: "{{ hostvars | dict2items | selectattr('value.windows_updates_log','defined') | items2dict }}"

    - name: Write updates log to JSON file
      copy:
        content: "{{ updates_log_entry | to_nice_json }}"
        dest: "{{ log_file }}"
