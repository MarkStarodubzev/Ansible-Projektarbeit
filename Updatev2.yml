---
- name: Update all servers
  hosts: all
  gather_facts: yes
  # Remove global become - handle per platform
  vars:
    log_dir: "/tmp/update_logs"
  tasks:
    - name: Ensure log directory exists on controller
      file:
        path: "{{ log_dir }}"
        state: directory
      delegate_to: localhost
      run_once: true

# --- Linux Updates ---
- name: Update Linux servers
  hosts: linux
  gather_facts: yes
  become: yes
  tasks:
    - name: Update package cache (Ubuntu/Debian)
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_facts['os_family'] == "Debian"

    - name: Upgrade all packages (Ubuntu/Debian)
      ansible.builtin.apt:
        upgrade: dist
        autoremove: yes
        autoclean: yes
      when: ansible_facts['os_family'] == "Debian"
      register: debian_upgrade

    - name: Update package cache (Fedora/RHEL/CentOS)
      ansible.builtin.dnf:
        update_cache: yes
      when: ansible_facts['os_family'] == "RedHat"

    - name: Upgrade all packages (Fedora/RHEL/CentOS)
      ansible.builtin.dnf:
        name: "*"
        state: latest
      when: ansible_facts['os_family'] == "RedHat"
      register: redhat_upgrade

    - name: Check if reboot required (Ubuntu/Debian)
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file
      when: ansible_facts['os_family'] == "Debian"

    - name: Reboot if required (Ubuntu/Debian)
      ansible.builtin.reboot:
        reboot_timeout: 600
        test_command: whoami
      when: 
        - ansible_facts['os_family'] == "Debian"
        - reboot_required_file.stat.exists

    - name: Reboot if kernel updated (RHEL/CentOS/Fedora)
      ansible.builtin.reboot:
        reboot_timeout: 600
        test_command: whoami
      when:
        - ansible_facts['os_family'] == "RedHat"
        - redhat_upgrade is defined
        - redhat_upgrade.changed

    - name: Collect Linux update information
      ansible.builtin.shell: |
        if [ "{{ ansible_facts['os_family'] }}" == "Debian" ]; then
          echo "=== Recently upgraded packages ===" 
          grep " upgrade " /var/log/apt/history.log | tail -20 || echo "No recent upgrades found"
          echo "=== Current upgradable packages ==="
          apt list --upgradable 2>/dev/null || echo "No upgradable packages"
        else
          echo "=== Recently updated packages ==="
          dnf history list --reverse | head -10 || echo "No recent updates found"
          echo "=== Available updates ==="
          dnf check-update 2>/dev/null || echo "All packages up to date"
        fi
      register: linux_updates
      changed_when: false
      failed_when: false

    - name: Save Linux updates log
      copy:
        content: |
          Linux Update Log for {{ inventory_hostname }}
          Generated: {{ ansible_date_time.iso8601 }}
          OS Family: {{ ansible_facts['os_family'] }}
          OS Version: {{ ansible_facts['distribution'] }} {{ ansible_facts['distribution_version'] }}
          
          {{ linux_updates.stdout }}
        dest: "{{ log_dir }}/linux_updates_{{ inventory_hostname }}_{{ ansible_date_time.iso8601 }}.log"
      delegate_to: localhost

# --- Windows Updates ---
- name: Update Windows servers
  hosts: windows
  gather_facts: yes
  # No become needed for Windows
  tasks:
    - name: Check for Windows updates
      community.windows.win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
          - UpdateRollups
          - Updates
        state: searched
      register: windows_pending

    - name: Display pending updates
      debug:
        msg: "Found {{ windows_pending.found_update_count | default(0) }} pending updates"

    - name: Install Windows updates
      community.windows.win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
          - UpdateRollups
        state: installed
        reboot: yes
        reboot_timeout: 1200
      register: windows_updates
      when: windows_pending.found_update_count | default(0) > 0

    - name: Save Windows updates log
      copy:
        content: |
          Windows Update Log for {{ inventory_hostname }}
          Generated: {{ ansible_date_time.iso8601 }}
          OS Version: {{ ansible_facts['distribution'] }} {{ ansible_facts['distribution_version'] }}
          
          Updates Found: {{ windows_pending.found_update_count | default(0) }}
          Updates Installed: {{ windows_updates.installed_update_count | default(0) }}
          Reboot Required: {{ windows_updates.reboot_required | default(false) }}
          
          {% if windows_updates.updates is defined %}
          Installed Updates:
          {% for update in windows_updates.updates %}
          - {{ update.title }}
          {% endfor %}
          {% endif %}
          
          {% if windows_pending.updates is defined %}
          Pending Updates:
          {% for update in windows_pending.updates %}
          - {{ update.title }}
          {% endfor %}
          {% endif %}
        dest: "{{ log_dir }}/windows_updates_{{ inventory_hostname }}_{{ ansible_date_time.iso8601 }}.log"
      delegate_to: localhost
