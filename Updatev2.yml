---
- name: Update Linux and Windows systems
  hosts: all
  gather_facts: yes

  vars:
    # Default-Werte fÃ¼r Logging
    update_type: "Unbekannt"
    update_status: "n/a"
    reboot_required: "nein"

  tasks:
    # --------------------------
    # Linux: APT
    # --------------------------
    - name: Update APT-based Linux systems
      ansible.builtin.apt:
        upgrade: dist
        update_cache: yes
      register: apt_result
      when:
        - ansible_os_family != "Windows"
        - ansible_pkg_mgr is defined
        - ansible_pkg_mgr == "apt"
      become: yes

    - name: Set log vars for APT
      set_fact:
        update_type: "APT"
        update_status: "{{ 'changed' if apt_result.changed else 'ok' }}"
      when:
        - ansible_os_family != "Windows"
        - ansible_pkg_mgr is defined
        - ansible_pkg_mgr == "apt"

    # --------------------------
    # Linux: DNF / YUM
    # --------------------------
    - name: Update YUM/DNF-based Linux systems
      ansible.builtin.dnf:
        name: "*"
        state: latest
      register: dnf_result
      when:
        - ansible_os_family != "Windows"
        - ansible_pkg_mgr is defined
        - ansible_pkg_mgr == ["dnf", "yum"]
      become: yes

    - name: Set log vars for DNF/YUM
      set_fact:
        update_type: "DNF/YUM"
        update_status: "{{ 'changed' if dnf_result.changed else 'ok' }}"
      when:
        - ansible_os_family != "Windows"
        - ansible_pkg_mgr is defined
        - ansible_pkg_mgr == ["dnf", "yum"]

    # --------------------------
    # Linux: Zypper
    # --------------------------
    - name: Update Zypper-based Linux systems
      community.general.zypper:
        name: "*"
        state: latest
      register: zypper_result
      when:
        - ansible_os_family != "Windows"
        - ansible_pkg_mgr is defined
        - ansible_pkg_mgr == "zypper"
      become: yes

    - name: Set log vars for Zypper
      set_fact:
        update_type: "Zypper"
        update_status: "{{ 'changed' if zypper_result.changed else 'ok' }}"
      when:
        - ansible_os_family != "Windows"
        - ansible_pkg_mgr is defined
        - ansible_pkg_mgr == "zypper"

    # --------------------------
    # Windows Updates
    # --------------------------
    - name: Install Windows updates
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
          - UpdateRollups
      register: win_update_result
      when: ansible_os_family == "Windows"

    - name: Set log vars for Windows
      set_fact:
        update_type: "WindowsUpdate"
        update_status: "{{ 'changed' if (win_update_result.updates | length > 0) else 'ok' }}"
        reboot_required: "{{ 'ja' if win_update_result.reboot_required else 'nein' }}"
      when: ansible_os_family == "Windows"

    # --------------------------
    # Build log line
    # --------------------------
    - name: Build update log line
      set_fact:
        update_log_line: "{{ ansible_date_time.date }} {{ ansible_date_time.time }},{{ inventory_hostname }},{{ ansible_distribution }} {{ ansible_distribution_version }},{{ update_type }},{{ update_status }},{{ reboot_required }}"

    # --------------------------
    # Local log file handling (Linux)
    # --------------------------
    - name: Ensure local CSV exists (Linux)
      ansible.builtin.file:
        path: /var/log/ansible_updates.csv
        state: touch
        mode: '0644'
      become: yes
      when: ansible_os_family != "Windows"

    - name: Add CSV header if file is empty (Linux)
      ansible.builtin.shell: |
        if [ ! -s /var/log/ansible_updates.csv ]; then
          echo "Datum,Uhrzeit,Host,OS,Update-Typ,Status,Reboot-Erforderlich" > /var/log/ansible_updates.csv
        fi
      args:
        executable: /bin/bash
      become: yes
      when: ansible_os_family != "Windows"

    - name: Append update log to local CSV (Linux)
      ansible.builtin.lineinfile:
        path: /var/log/ansible_updates.csv
        line: "{{ update_log_line }}"
        create: yes
        insertafter: EOF
      become: yes
      when: ansible_os_family != "Windows"

    # --------------------------
    # Local log file handling (Windows)
    # --------------------------
    - name: Ensure local CSV exists (Windows)
      win_file:
        path: C:\ansible_updates.csv
        state: touch
      when: ansible_os_family == "Windows"

    - name: Add CSV header if file is empty (Windows)
      win_shell: |
        if (!(Test-Path C:\ansible_updates.csv) -or (Get-Content C:\ansible_updates.csv).Length -eq 0) {
          "Datum,Uhrzeit,Host,OS,Update-Typ,Status,Reboot-Erforderlich" | Out-File -FilePath C:\ansible_updates.csv -Encoding utf8
        }
      when: ansible_os_family == "Windows"

    - name: Append update log to local CSV (Windows)
      win_lineinfile:
        path: C:\ansible_updates.csv
        line: "{{ update_log_line }}"
        create: yes
        insertafter: EOF
      when: ansible_os_family == "Windows"
