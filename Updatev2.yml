---
- name: Update Linux and Windows systems
  hosts: all
  gather_facts: yes

  vars:
    update_log_line: "{{ ansible_date_time.date }} {{ ansible_date_time.time }}," 
                     "{{ inventory_hostname }},{{ ansible_distribution }} {{ ansible_distribution_version }}," 
                     "{{ update_type }},{{ update_status }},{{ reboot_required | default('nein') }}"

  tasks:
    # --------------------------
    # Linux Updates
    # --------------------------
    - name: Update APT-based Linux systems
      ansible.builtin.apt:
        update_cache: yes
        upgrade: dist
      register: apt_result
      when: ansible_os_family == "Debian"
      vars:
        update_type: "APT"
        update_status: "{{ 'OK' if apt_result is succeeded else 'Fehler' }}"

    - name: Update YUM-based Linux systems
      ansible.builtin.yum:
        name: '*'
        state: latest
      register: yum_result
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version | int < 37
      vars:
        update_type: "YUM"
        update_status: "{{ 'OK' if yum_result is succeeded else 'Fehler' }}"

    - name: Update DNF-based Linux systems
      ansible.builtin.dnf:
        name: '*'
        state: latest
      register: dnf_result
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version | int >= 37
      vars:
        update_type: "DNF"
        update_status: "{{ 'OK' if dnf_result is succeeded else 'Fehler' }}"

    - name: Update Zypper-based Linux systems
      community.general.zypper:
        name: '*'
        state: latest
      register: zypper_result
      when: ansible_os_family == "Suse"
      vars:
        update_type: "Zypper"
        update_status: "{{ 'OK' if zypper_result is succeeded else 'Fehler' }}"

    # --------------------------
    # Windows Updates
    # --------------------------
    - name: Install Windows updates
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
          - UpdateRollups
      register: win_updates
      when: ansible_os_family == "Windows"
      vars:
        update_type: "WindowsUpdate"
        update_status: "{{ 'OK' if win_updates is succeeded else 'Fehler' }}"
        reboot_required: "{{ 'ja' if win_updates.reboot_required | default(false) else 'nein' }}"

    # --------------------------
    # Logging (Linux)
    # --------------------------
    - name: Ensure local CSV exists (Linux)
      ansible.builtin.file:
        path: /var/log/ansible_updates.csv
        state: touch
        mode: '0644'
      become: yes
      when: ansible_os_family != "Windows"

    - name: Add CSV header if file is empty (Linux)
      ansible.builtin.shell: |
        if [ ! -s /var/log/ansible_updates.csv ]; then
          echo "Datum,Uhrzeit,Host,OS,Update-Typ,Status,Reboot-Erforderlich" > /var/log/ansible_updates.csv
        fi
      args:
        executable: /bin/bash
      become: yes
      when: ansible_os_family != "Windows"

    - name: Append update log to local CSV (Linux)
      ansible.builtin.lineinfile:
        path: /var/log/ansible_updates.csv
        line: "{{ update_log_line }}"
        create: yes
        insertafter: EOF
      become: yes
      when: ansible_os_family != "Windows"

    # --------------------------
    # Logging (Windows)
    # --------------------------
    - name: Ensure local CSV exists (Windows)
      win_file:
        path: C:\ansible_updates.csv
        state: touch
      when: ansible_os_family == "Windows"

    - name: Add CSV header if file is empty (Windows)
      win_shell: |
        if (!(Test-Path C:\ansible_updates.csv) -or (Get-Content C:\ansible_updates.csv).Length -eq 0) {
          "Datum,Uhrzeit,Host,OS,Update-Typ,Status,Reboot-Erforderlich" | Out-File -FilePath C:\ansible_updates.csv -Encoding utf8
        }
      when: ansible_os_family == "Windows"

    - name: Append update log to local CSV (Windows)
      win_lineinfile:
        path: C:\ansible_updates.csv
        line: "{{ update_log_line }}"
        create: yes
        insertafter: EOF
      when: ansible_os_family == "Windows"
