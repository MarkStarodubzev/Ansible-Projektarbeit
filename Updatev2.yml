---
- name: Init updates log
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Initialize updates_log_entry
      set_fact:
        updates_log_entry: {}

- name: Update Linux servers
  hosts: linux
  gather_facts: yes
  become: yes
  tasks:
    - name: Update package cache (Ubuntu/Debian)
      apt:
        update_cache: yes
      when: ansible_facts['os_family'] == "Debian"

    - name: Upgrade all packages (Ubuntu/Debian)
      apt:
        upgrade: dist
        autoremove: yes
      when: ansible_facts['os_family'] == "Debian"
      register: ubuntu_updates

    - name: Update package cache (Fedora/RHEL)
      dnf5:
        update_cache: yes
      when: ansible_facts['os_family'] == "RedHat"

    - name: Upgrade all packages (Fedora/RHEL)
      dnf5:
        name: "*"
        state: latest
      when: ansible_facts['os_family'] == "RedHat"
      register: fedora_updates

    - name: Reboot if kernel upgraded
      reboot:
        reboot_timeout: 200
        test_command: whoami

    # Logging für Linux
    - name: Collect Linux updates for logging
      set_fact:
        updates_log_entry: >-
          {{
            (updates_log_entry | default({})) | combine({
              inventory_hostname: {
                'os': ansible_facts['os_family'],
                'updates': (ubuntu_updates.stdout_lines | default([])) +
                           (fedora_updates.results | default([]))
              }
            })
          }}
      delegate_to: localhost

- name: Update Windows servers
  hosts: windows
  gather_facts: yes
  tasks:
    - name: Check for updates
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
        state: searched
      register: windows_pending

    - name: Install updates
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
        state: installed
        reboot: yes
      register: windows_updates

    # Logging für Windows
    - name: Collect Windows updates for logging
      set_fact:
        updates_log_entry: >-
          {{
            (updates_log_entry | default({})) | combine({
              inventory_hostname: {
                'os': 'Windows',
                'updates': windows_updates.updates | default([])
              }
            })
          }}
      delegate_to: localhost

- name: Write updates log to JSON file on controller with timestamp
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Save all updates to timestamped JSON
      copy:
        dest: "/tmp/updates_log_{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}.json"
        content: "{{ updates_log_entry | to_nice_json }}"
