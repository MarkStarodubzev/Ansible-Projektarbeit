---
# Playbook: Updatev2.yml
# Zweck: Updates f√ºr Linux (Ubuntu/Debian + Fedora/RHEL) und Windows
# Logging in JSON auf dem Controller

- name: Set ansible_become_pass from extra vars
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Set become password safely
      set_fact:
        ansible_become_pass: "{{ vault_become_password | default('') }}"

- name: Update Linux servers
  hosts: linux
  gather_facts: yes
  become: yes
  tasks:
    - name: Update package cache (Debian/Ubuntu)
      apt:
        update_cache: yes
      when: ansible_facts['os_family'] == 'Debian'

    - name: Upgrade all packages (Debian/Ubuntu)
      apt:
        upgrade: dist
        autoremove: yes
      when: ansible_facts['os_family'] == 'Debian'

    - name: Update package cache (Fedora/RHEL)
      dnf:
        update_cache: yes
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Upgrade all packages (Fedora/RHEL)
      dnf:
        name: '*'
        state: latest
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Reboot if kernel upgraded
      reboot:
        reboot_timeout: 200
        test_command: whoami

    - name: Collect Linux updates for logging
      set_fact:
        linux_updates_log: "{{ ansible_facts.packages }}"
      when: ansible_facts is defined

- name: Update Windows servers
  hosts: windows
  gather_facts: yes
  tasks:
    - name: Check for security and critical updates
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
        state: searched
      register: windows_pending

    - name: Install security and critical updates
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
        state: installed
        reboot: yes
      register: windows_updates

    - name: Collect Windows updates for logging
      set_fact:
        windows_updates_log: "{{ windows_updates.updates }}"

- name: Save all updates to timestamped JSON
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Ensure log directory exists
      file:
        path: ./logs
        state: directory

    - name: Save updates to JSON file
      copy:
        content: |
          {
            "timestamp": "{{ lookup('pipe', 'date +%Y-%m-%d_%H-%M-%S') }}",
            "linux_updates": {{ linux_updates_log | default({}) | to_nice_json }},
            "windows_updates": {{ windows_updates_log | default([]) | to_nice_json }}
          }
        dest: "./logs/updates_{{ lookup('pipe', 'date +%Y-%m-%d_%H-%M-%S') }}.json"
