---
- name: Set become password from Vault
  hosts: localhost
  gather_facts: no
  vars_files:
    - vault.yml
  tasks:
    - name: Set ansible_become_pass
      set_fact:
        ansible_become_pass: "{{ vault_become_password }}"  # Dein Passwort aus Vault

- name: Update Linux servers
  hosts: linux
  gather_facts: yes
  become: yes
  become_method: sudo
  tasks:

    - name: Update package cache (Ubuntu/Debian)
      ansible.builtin.apt:
        update_cache: yes
      when: ansible_facts['os_family'] == "Debian"

    - name: Upgrade all packages (Ubuntu/Debian)
      ansible.builtin.apt:
        upgrade: dist
        autoremove: yes
      when: ansible_facts['os_family'] == "Debian"

    - name: Update package cache (Fedora)
      ansible.builtin.command:
        cmd: dnf -y makecache
      when: ansible_facts['distribution'] == "Fedora"

    - name: Upgrade all packages (Fedora)
      ansible.builtin.command:
        cmd: dnf -y upgrade --refresh
      when: ansible_facts['distribution'] == "Fedora"

    - name: Reboot if kernel upgraded
      ansible.builtin.reboot:
        reboot_timeout: 200
        test_command: whoami

    - name: Collect Linux updates for logging
      set_fact:
        linux_updates_log: "{{ ansible_facts.packages | default({}) }}"

- name: Update Windows servers
  hosts: windows
  gather_facts: yes
  tasks:

    - name: Check for pending updates
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
        state: searched
      register: windows_pending

    - name: Install updates
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
        state: installed
        reboot: yes
      register: windows_updates

    - name: Collect Windows updates for logging
      set_fact:
        windows_updates_log: "{{ windows_updates.updates | default([]) }}"

- name: Write updates log to JSON file on controller
  hosts: localhost
  gather_facts: no
  vars:
    log_dir: "/tmp/ansible_update_logs"
    log_file: "{{ log_dir }}/update_log_{{ ansible_date_time.iso8601_basic_short }}.json"
  tasks:

    - name: Ensure log directory exists
      ansible.builtin.file:
        path: "{{ log_dir }}"
        state: directory
        mode: '0755'

    - name: Save all updates to timestamped JSON
      ansible.builtin.copy:
        dest: "{{ log_file }}"
        content: |
          {
            "linux": {{ hostvars | dict2items | selectattr('value.linux_updates_log','defined') | map(attribute='value.linux_updates_log') | list | to_nice_json }},
            "windows": {{ hostvars | dict2items | selectattr('value.windows_updates_log','defined') | map(attribute='value.windows_updates_log') | list | to_nice_json }}
          }
