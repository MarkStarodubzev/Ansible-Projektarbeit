---
- name: Update Linux and Windows systems
  hosts: all
  gather_facts: yes
  vars_files:
    - vault.yml

  vars:
    log_dir: "/tmp/update_logs"
    timestamp: "{{ lookup('pipe', 'date +%Y-%m-%d_%H-%M-%S') }}"

  tasks:

    # --- Ensure log directory exists ---
    - name: Ensure log directory exists on controller
      delegate_to: localhost
      ansible.builtin.file:
        path: "{{ log_dir }}"
        state: directory
        mode: '0755'

    # --- Linux Tasks ---
    - name: Update package cache (Ubuntu/Debian)
      ansible.builtin.apt:
        update_cache: yes
      become: yes
      become_method: sudo
      vars:
        ansible_become_password: "{{ ansible_become_passwords[inventory_hostname] }}"
      when: ansible_facts['os_family'] == "Debian"

    - name: Upgrade all packages (Ubuntu/Debian)
      ansible.builtin.apt:
        upgrade: dist
      register: debian_upgrade
      become: yes
      become_method: sudo
      vars:
        ansible_become_password: "{{ ansible_become_passwords[inventory_hostname] }}"
      when: ansible_facts['os_family'] == "Debian"

    - name: Update package cache (Fedora/RHEL)
      ansible.builtin.command: dnf5 -y makecache
      changed_when: false
      become: yes
      become_method: sudo
      vars:
        ansible_become_password: "{{ ansible_become_passwords[inventory_hostname] }}"
      when: ansible_facts['os_family'] == "RedHat"

    - name: Upgrade all packages (Fedora/RHEL)
      ansible.builtin.command: dnf5 -y upgrade
      register: fedora_upgrade
      become: yes
      become_method: sudo
      vars:
        ansible_become_password: "{{ ansible_become_passwords[inventory_hostname] }}"
      when: ansible_facts['os_family'] == "RedHat"

    - name: Reboot if kernel upgraded (Fedora/RHEL)
      ansible.builtin.reboot:
      when:
        - ansible_facts['os_family'] == "RedHat"
        - fedora_upgrade is defined
        - '"kernel" in fedora_upgrade.stdout'

    # --- Windows Tasks ---
    - name: Install all available Windows updates
      ansible.windows.win_updates:
        category_names: "*"
        reboot: yes
      register: win_update_results
      when: ansible_facts['os_family'] == "Windows"

    # --- Logging ---
    - name: Build Linux updates log entry
      set_fact:
        updates_log_entry:
          host: "{{ inventory_hostname }}"
          os_family: "{{ ansible_facts['os_family'] }}"
          timestamp: "{{ timestamp }}"
          updates: "{{ debian_upgrade.stdout_lines | default(fedora_upgrade.stdout_lines | default([])) }}"
      when: ansible_facts['os_family'] in ["Debian", "RedHat"]

    - name: Build Windows updates log entry
      set_fact:
        updates_log_entry:
          host: "{{ inventory_hostname }}"
          os_family: "{{ ansible_facts['os_family'] }}"
          timestamp: "{{ timestamp }}"
          updates: "{{ win_update_results.updates | default([]) }}"
      when: ansible_facts['os_family'] == "Windows"

    - name: Save all updates to timestamped JSON
      delegate_to: localhost
      ansible.builtin.copy:
        dest: "{{ log_dir }}/updates_{{ inventory_hostname }}_{{ timestamp }}.json"
        content: "{{ updates_log_entry | to_nice_json }}"
      when: updates_log_entry is defined
