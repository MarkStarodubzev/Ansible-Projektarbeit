---
- name: Set ansible_become_pass from Vault
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Set ansible_become_pass safely
      set_fact:
        ansible_become_pass: "{{ vault_become_password }}"

- name: Update Linux and Windows servers
  hosts: all
  gather_facts: yes
  tasks:

    # --- Linux Updates ---
    - name: Update package cache (Ubuntu/Debian)
      apt:
        update_cache: yes
      become: yes
      become_pass: "{{ ansible_become_pass }}"
      when: ansible_facts['os_family'] == 'Debian'

    - name: Upgrade all packages (Ubuntu/Debian)
      apt:
        upgrade: dist
        autoremove: yes
      become: yes
      become_pass: "{{ ansible_become_pass }}"
      when: ansible_facts['os_family'] == 'Debian'

    - name: Update package cache (Fedora/RHEL)
      dnf:
        update_cache: yes
      become: yes
      become_pass: "{{ ansible_become_pass }}"
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Upgrade all packages (Fedora/RHEL)
      dnf:
        name: '*'
        state: latest
      become: yes
      become_pass: "{{ ansible_become_pass }}"
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Reboot Linux if kernel upgraded
      reboot:
        reboot_timeout: 300
        test_command: whoami
      become: yes
      become_pass: "{{ ansible_become_pass }}"
      when: ansible_facts['os_family'] in ['Debian','RedHat']

    - name: Collect Linux updates for logging
      command: "bash -c 'apt list --upgradable 2>/dev/null || dnf check-update'"
      register: linux_updates
      when: ansible_facts['os_family'] in ['Debian','RedHat']

    - name: Show Linux updates
      debug:
        msg: "{{ linux_updates.stdout_lines }}"
      when: ansible_facts['os_family'] in ['Debian','RedHat']

    # --- Windows Updates ---
    - name: Check for pending Windows updates
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
        state: searched
      register: windows_pending
      when: ansible_facts['os_family'] == 'Windows'

    - name: Install pending Windows updates
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
        state: installed
        reboot: yes
      register: windows_updates
      when: ansible_facts['os_family'] == 'Windows'

    - name: Show Windows updates
      debug:
        msg: "{{ windows_updates }}"
      when: ansible_facts['os_family'] == 'Windows'

    # --- Logging ---
    - name: Ensure log directory exists on controller
      file:
        path: "/tmp/ansible_update_logs"
        state: directory
        mode: '0755'
      delegate_to: localhost

    - name: Save all updates to timestamped JSON
      copy:
        dest: "/tmp/ansible_update_logs/updates_{{ ansible_date_time.iso8601_basic }}.json"
        content: |
          {
            "linux_updates": {{ linux_updates.stdout | to_json }},
            "windows_updates": {{ windows_updates | to_json }}
          }
      delegate_to: localhost
